I'm trying to add normal maps to some video game sprites I'm making.
This tiny lil app will help me interpolate between colors.

Normally I'd write this in C++, but I wanted to see if I still know some old-school C.
Libraries for this already exist, but I'm writing my own stuff just for practice.



---------------------------
Usage:
  In your Unix/Posix shell, run the command:
      $ make main
  This compiles to a binary/executable file called "a.out", located in the same directory as the makefile.
  You can then just run the command:
    $ ./a.out
  This will execute the program.

  The command:
    $ make clean
  will remove the compiled binary.

  Note: the binary contains debugging info, in case you want to use GDB or something.

  ----------------------------

Design considerations:
  - I separated headers from the code body for the purposes of forward declaration. I don't know if it's common practice in C, but it's definitely common in C++.
  - Sometimes I didn't include helper functions in the header files, since they don't need to be called in other modules.
  - I tried to implement some separation of concerns by storing string literals in a separate file, as global variables. If I want to change them, I just modify them in menustrings.c, instead of having to go to the actual function calls.


----------------------------
UPDATE 1/3/2022:
TO-DO:
  - Unit testing
  - Implement menus and interpolators
  - Migrate testing suite to unittests.c --> might delay this, since best practices would tell me to add a bunch of preprocessor directives

  -- Possible future features:
      (1.) Parse PNG files
      (2.) Programmatically generate normal maps from PNG RGBA values
      (3.) Save normal maps as PNG files
